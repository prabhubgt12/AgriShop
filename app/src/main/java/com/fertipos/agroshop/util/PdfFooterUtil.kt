package com.fertipos.agroshop.util

import android.content.Context
import android.graphics.Canvas
import android.graphics.Paint
import android.graphics.Typeface
import android.graphics.BitmapFactory
import android.graphics.Rect
import com.fertipos.agroshop.R

object PdfFooterUtil {
    
    /**
     * Adds a footer with "Auto generated by Simple Shop app" text and Simple Shop logo
     * @param context Android context
     * @param canvas PDF canvas
     * @param paint Paint object for drawing
     * @param pageWidth Width of the page
     * @param pageHeight Height of the page
     * @param hasRemoveAds Whether user has purchased remove ads (if true, footer is not added)
     */
    fun addFooter(
        context: Context,
        canvas: Canvas,
        paint: Paint,
        pageWidth: Float,
        pageHeight: Float,
        hasRemoveAds: Boolean = false
    ) {
        // Don't add footer if user has purchased remove ads
        if (hasRemoveAds) return
        
        val footerY = pageHeight - 60f
        val originalTextSize = paint.textSize
        val originalTypeface = paint.typeface
        
        try {
            // Set footer text properties
            paint.textSize = 10f
            paint.typeface = Typeface.create(Typeface.DEFAULT, Typeface.ITALIC)
            
            val footerText = "Auto generated by Simple Shop app"
            val textWidth = paint.measureText(footerText)
            
            // Draw Simple Shop logo (from app resources)
            try {
                val logoBitmap = BitmapFactory.decodeResource(context.resources, R.drawable.ic_launcher_foreground)
                if (logoBitmap != null) {
                    val logoSize = 24
                    val logoX = (pageWidth - textWidth - logoSize - 10f) / 2f
                    val logoY = footerY - logoSize / 2f
                    val logoRect = Rect(
                        logoX.toInt(),
                        logoY.toInt(),
                        (logoX + logoSize).toInt(),
                        (logoY + logoSize).toInt()
                    )
                    canvas.drawBitmap(logoBitmap, null, logoRect, null)
                    
                    // Draw text next to logo
                    val textX = logoX + logoSize + 5f
                    canvas.drawText(footerText, textX, footerY, paint)
                } else {
                    // Fallback: just draw text centered if logo fails
                    val textX = (pageWidth - textWidth) / 2f
                    canvas.drawText(footerText, textX, footerY, paint)
                }
            } catch (e: Exception) {
                // Fallback: just draw text centered if logo fails
                val textX = (pageWidth - textWidth) / 2f
                canvas.drawText(footerText, textX, footerY, paint)
            }
            
            // Draw a subtle line above the footer
            paint.strokeWidth = 0.5f
            canvas.drawLine(40f, footerY - 20f, pageWidth - 40f, footerY - 20f, paint)
            
        } finally {
            // Restore original paint properties
            paint.textSize = originalTextSize
            paint.typeface = originalTypeface
            paint.strokeWidth = 1f
        }
    }
}
